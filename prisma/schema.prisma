// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg" // or "./docs/ERD.svg", can be .svg | .png | .pdf | .mmd
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id              String    @id @default(uuid())
  key             String    @unique
  name            String
  defaultAssignee String?
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  members         Member[]
  goals           Goal[]
}

model Member {
  id        String  @id
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

enum IssueType {
  BUG
  TASK
  SUBTASK
  STORY
  EPIC
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Issue {
  id             String      @id @default(uuid())
  key            String
  name           String
  description    String?     @db.Text()
  status         IssueStatus @default(TODO)
  type           IssueType   @default(TASK)
  sprintPosition Float
  boardPosition  Float       @default(-1)
  reporterId     String      @default("1")
  assigneeId     String?
  parentId       String?
  sprintId       String?
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  sprintColor    String?
  creatorId      String
  comments       Comment[]
  Sprint         Sprint?     @relation(fields: [sprintId], references: [id])

  @@unique([key, creatorId])
  @@index([sprintId])
}

enum SprintStatus {
  ACTIVE
  PENDING
  CLOSED
}

enum Duration {
  ONE_WEEK
  TWO_WEEKS
  THREE_WEEKS
  FOUR_WEEKS
  CUSTOM
}

enum GoalChannel {
  TRADING
  YOUTUBE
  NEWSLETTER
  NOTION_TEMPLATE
  CLI
  EXTENSION
  SEO
  MICROSaaS
}

enum RevenueKind {
  AFFILIATE
  SPONSOR
  DONATION
  PREORDER
  SALE
  CONSULTING
}

model Sprint {
  id          String       @id @default(uuid())
  name        String
  description String       @db.Text()
  duration    String?
  startDate   DateTime?
  endDate     DateTime?
  creatorId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  status      SprintStatus @default(PENDING)
  issues      Issue[]

  // Relations
  roadmapId String?
  roadmap   Roadmap? @relation(fields: [roadmapId], references: [id])
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text()
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isEdited  Boolean   @default(false)
  issueId   String
  logId     String?
  Issue     Issue?    @relation(fields: [issueId], references: [id])

  @@index([issueId])
}

model DefaultUser {
  id     String  @id
  name   String
  email  String
  avatar String?
}

model Goal {
  id            String      @id @default(uuid())
  projectId     String
  title         String
  niche         String?
  channel       GoalChannel
  description   String?     @db.Text()
  timeboxDays   Int         @default(30)
  budgetUsd     Int         @default(0)
  successMetric String      @default("$50 net")
  constraints   Json
  revenue       Json
  deliverables  Json
  audienceJson  Json?
  profileJson   Json?
  createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  templateId    String?

  // Relations
  project          Project               @relation(fields: [projectId], references: [id])
  template         GoalTemplate?         @relation(fields: [templateId], references: [id])
  contextSnapshots GoalContextSnapshot[]
  Roadmap          Roadmap?
  assessments      KnowledgeAssessment[]

  @@index([projectId])
  @@index([createdBy])
  @@index([channel])
}

model GoalTemplate {
  id           String   @id @default(uuid())
  name         String
  promptText   String   @db.Text()
  outputSchema Json
  systemMsg    String?  @db.Text()
  createdAt    DateTime @default(now())

  // Relations
  goals Goal[]
}

model GoalContextSnapshot {
  id             String   @id @default(uuid())
  goalId         String
  repoSnapshotId String?
  summary        String   @db.Text()
  keywords       String[]
  risks          String?  @db.Text()
  competitors    Json?
  sourcesCount   Int
  createdAt      DateTime @default(now())

  // Relations
  goal            Goal             @relation(fields: [goalId], references: [id])
  researchSources ResearchSource[]

  @@index([goalId])
}

model ResearchSource {
  id          String    @id @default(uuid())
  snapshotId  String
  url         String
  title       String
  publishedAt DateTime?
  relevance   Float
  excerpt     String?   @db.Text()

  // Relations
  snapshot GoalContextSnapshot @relation(fields: [snapshotId], references: [id])

  @@index([snapshotId])
}



// Add Roadmap model
model Roadmap {
  id          String   @id @default(uuid())
  goalId      String   @unique
  goal        Goal     @relation(fields: [goalId], references: [id])
  name        String
  description String?  @db.Text()
  status      String   @default("DRAFT") // DRAFT, ACTIVE, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sprints     Sprint[]

  @@index([goalId])
}

// ============= KNOWLEDGE ASSESSMENT & PLAN GENERATION MODELS =============

enum ExpertiseLevel {
  BEGINNER      // No prior experience
  NOVICE        // Basic understanding, limited practice
  INTERMEDIATE  // Some experience, can work independently
  ADVANCED      // Extensive experience, can mentor others
  EXPERT        // Industry-level expertise
}

enum QuestionType {
  SINGLE_CHOICE    // Radio button selection
  MULTIPLE_CHOICE  // Checkbox selection
  SCALE           // 1-10 scale rating
  TEXT            // Free text input
  BOOLEAN         // Yes/No
  NUMERIC         // Number input
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
}

enum KnowledgeDomain {
  // Trading specific
  MARKET_ANALYSIS
  RISK_MANAGEMENT
  TECHNICAL_ANALYSIS
  FUNDAMENTAL_ANALYSIS
  TRADING_PSYCHOLOGY
  PLATFORM_USAGE
  
  // YouTube specific
  CONTENT_CREATION
  VIDEO_EDITING
  AUDIENCE_BUILDING
  MONETIZATION
  SEO_OPTIMIZATION
  ANALYTICS
  
  // Newsletter specific
  WRITING
  EMAIL_MARKETING
  SUBSCRIBER_GROWTH
  CONTENT_CURATION
  AUTOMATION
  
  // Technical/SaaS specific
  PROGRAMMING
  SYSTEM_DESIGN
  DEPLOYMENT
  MARKETING
  CUSTOMER_SUPPORT
  PRICING_STRATEGY
  
  // General
  PROJECT_MANAGEMENT
  TIME_MANAGEMENT
  BUDGETING
  NETWORKING
}

enum PlanStatus {
  DRAFT
  REVIEWED
  APPROVED
  EXECUTING
  COMPLETED
  ABANDONED
}

model KnowledgeAssessment {
  id               String           @id @default(uuid())
  goalId           String
  userId           String
  channel          GoalChannel
  overallLevel     ExpertiseLevel   @default(BEGINNER)
  status           AssessmentStatus @default(NOT_STARTED)
  completedAt      DateTime?
  expiresAt        DateTime?        // Assessment validity period
  score            Float?           // Overall score 0-100
  confidence       Float?           // Confidence level 0-1
  timeSpent        Int?             // Time spent in seconds
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  goal             Goal                      @relation(fields: [goalId], references: [id])
  domainScores     DomainExpertise[]
  responses        AssessmentResponse[]
  generatedPlans   GeneratedPlan[]
  recommendations  AssessmentRecommendation[]

  @@unique([goalId, userId])
  @@index([goalId])
  @@index([userId])
  @@index([status])
}

model DomainExpertise {
  id            String            @id @default(uuid())
  assessmentId  String
  domain        KnowledgeDomain
  level         ExpertiseLevel
  score         Float             // 0-100
  confidence    Float             // 0-1
  details       Json?             // Additional metadata

  // Relations
  assessment    KnowledgeAssessment @relation(fields: [assessmentId], references: [id])

  @@unique([assessmentId, domain])
  @@index([assessmentId])
}

model AssessmentQuestion {
  id                String              @id @default(uuid())
  templateId        String
  domain            KnowledgeDomain
  questionText      String              @db.Text()
  questionType      QuestionType
  isRequired        Boolean             @default(true)
  order             Int
  weight            Float               @default(1.0)    // Importance weight
  options           Json?               // For choice questions
  validationRules   Json?               // Validation for answers
  helpText          String?             @db.Text()
  dependsOn         String?             // ID of parent question
  dependsOnAnswer   Json?               // Required answer from parent
  metadata          Json?               // Additional properties
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  template          AssessmentTemplate   @relation(fields: [templateId], references: [id])
  responses         AssessmentResponse[]
  scoringRules      QuestionScoringRule[]

  @@index([templateId])
  @@index([domain])
  @@index([order])
}

model AssessmentTemplate {
  id                String                @id @default(uuid())
  name              String
  channel           GoalChannel
  description       String?               @db.Text()
  version           String                @default("1.0.0")
  isActive          Boolean               @default(true)
  minQuestions      Int                   @default(5)
  maxQuestions      Int                   @default(20)
  timeLimit         Int?                  // In minutes
  passingScore      Float                 @default(60)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Relations
  questions         AssessmentQuestion[]
  planTemplates     PlanTemplate[]

  @@unique([channel, version])
  @@index([channel])
  @@index([isActive])
}

model AssessmentResponse {
  id            String              @id @default(uuid())
  assessmentId  String
  questionId    String
  answer        Json                // Flexible answer storage
  score         Float?              // Calculated score for this answer
  timeSpent     Int?                // Time spent on question in seconds
  confidence    Float?              // User's confidence in answer
  createdAt     DateTime            @default(now())

  // Relations
  assessment    KnowledgeAssessment @relation(fields: [assessmentId], references: [id])
  question      AssessmentQuestion  @relation(fields: [questionId], references: [id])

  @@unique([assessmentId, questionId])
  @@index([assessmentId])
  @@index([questionId])
}

model QuestionScoringRule {
  id            String             @id @default(uuid())
  questionId    String
  condition     Json               // Condition to match
  score         Float              // Score to assign
  feedback      String?            @db.Text()
  
  // Relations
  question      AssessmentQuestion @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model AssessmentRecommendation {
  id            String              @id @default(uuid())
  assessmentId  String
  domain        KnowledgeDomain
  type          String              // "learning", "tool", "resource", etc.
  title         String
  description   String              @db.Text()
  priority      Int                 // 1 (highest) to 5 (lowest)
  url           String?
  estimatedTime Int?                // In hours
  metadata      Json?

  // Relations
  assessment    KnowledgeAssessment @relation(fields: [assessmentId], references: [id])

  @@index([assessmentId])
  @@index([priority])
}

model PlanTemplate {
  id                String              @id @default(uuid())
  name              String
  channel           GoalChannel
  templateId        String
  description       String?             @db.Text()
  minExpertise      ExpertiseLevel      @default(BEGINNER)
  maxExpertise      ExpertiseLevel      @default(EXPERT)
  typicalDuration   Int                 // In days
  sprintCount       Int                 @default(4)
  successRate       Float?              // Historical success rate
  version           String              @default("1.0.0")
  isActive          Boolean             @default(true)
  structure         Json                // Sprint and issue structure
  prerequisites     Json?               // Required conditions
  deliverables      Json                // Expected outcomes
  milestones        Json?               // Key checkpoints
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  assessmentTemplate AssessmentTemplate @relation(fields: [templateId], references: [id])
  generatedPlans     GeneratedPlan[]
  activities         PlanActivity[]

  @@index([channel])
  @@index([templateId])
  @@index([minExpertise, maxExpertise])
}

model PlanActivity {
  id              String         @id @default(uuid())
  templateId      String
  name            String
  description     String         @db.Text()
  type            String         // "learning", "setup", "execution", "review"
  phase           Int            // Which phase/sprint this belongs to
  order           Int            // Order within phase
  estimatedHours  Float
  difficulty      ExpertiseLevel
  dependencies    String[]       // IDs of dependent activities
  resources       Json?          // Required resources/tools
  successCriteria Json           // How to measure completion
  metadata        Json?

  // Relations
  template        PlanTemplate   @relation(fields: [templateId], references: [id])

  @@index([templateId])
  @@index([phase, order])
}

model GeneratedPlan {
  id                String              @id @default(uuid())
  assessmentId      String
  templateId        String
  goalId            String
  name              String
  description       String?             @db.Text()
  status            PlanStatus          @default(DRAFT)
  adjustedForUser   Boolean             @default(true)
  estimatedHours    Float
  actualHours       Float?
  startDate         DateTime?
  endDate           DateTime?
  completionRate    Float               @default(0)
  successProbability Float?             // ML-predicted success chance
  riskFactors       Json?               // Identified risks
  adaptations       Json?               // User-specific adjustments
  approvedAt        DateTime?
  approvedBy        String?
  executedAt        DateTime?
  completedAt       DateTime?
  feedback          String?             @db.Text()
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  assessment        KnowledgeAssessment @relation(fields: [assessmentId], references: [id])
  template          PlanTemplate        @relation(fields: [templateId], references: [id])
  planItems         GeneratedPlanItem[]
  metrics           PlanMetric[]

  @@index([assessmentId])
  @@index([goalId])
  @@index([status])
}

model GeneratedPlanItem {
  id              String          @id @default(uuid())
  planId          String
  type            String          // "sprint" or "issue"
  parentId        String?         // For hierarchical items
  name            String
  description     String          @db.Text()
  phase           Int
  order           Int
  estimatedHours  Float
  actualHours     Float?
  difficulty      ExpertiseLevel
  status          String          @default("pending")
  assignedTo      String?
  startDate       DateTime?
  endDate         DateTime?
  completedAt     DateTime?
  metadata        Json?           // Type-specific data
  dependencies    String[]        // IDs of dependent items
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  plan            GeneratedPlan   @relation(fields: [planId], references: [id])

  @@index([planId])
  @@index([type])
  @@index([phase, order])
}

model PlanMetric {
  id          String        @id @default(uuid())
  planId      String
  name        String
  value       Float
  unit        String?
  timestamp   DateTime      @default(now())
  category    String        // "progress", "quality", "efficiency"
  
  // Relations
  plan        GeneratedPlan @relation(fields: [planId], references: [id])

  @@index([planId])
  @@index([category])
  @@index([timestamp])
}
