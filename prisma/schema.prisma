// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id              String    @id @default(uuid())
  key             String    @unique
  name            String
  defaultAssignee String?
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  members         Member[]
  goals           Goal[]
}

model Member {
  id        String  @id
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

enum IssueType {
  BUG
  TASK
  SUBTASK
  STORY
  EPIC
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Issue {
  id             String      @id @default(uuid())
  key            String
  name           String
  description    String?     @db.Text()
  status         IssueStatus @default(TODO)
  type           IssueType   @default(TASK)
  sprintPosition Float
  boardPosition  Float       @default(-1)
  reporterId     String      @default("1")
  assigneeId     String?
  parentId       String?
  sprintId       String?
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  sprintColor    String?
  creatorId      String
  comments       Comment[]
  Sprint         Sprint?     @relation(fields: [sprintId], references: [id])

  @@unique([key, creatorId])
  @@index([sprintId])
}

enum SprintStatus {
  ACTIVE
  PENDING
  CLOSED
}

enum Duration {
  ONE_WEEK
  TWO_WEEKS
  THREE_WEEKS
  FOUR_WEEKS
  CUSTOM
}

enum GoalChannel {
  TRADING
  YOUTUBE
  NEWSLETTER
  NOTION_TEMPLATE
  CLI
  EXTENSION
  SEO
  MICROSaaS
}

enum RevenueKind {
  AFFILIATE
  SPONSOR
  DONATION
  PREORDER
  SALE
  CONSULTING
}

model Sprint {
  id          String       @id @default(uuid())
  name        String
  description String       @db.Text()
  duration    String?
  startDate   DateTime?
  endDate     DateTime?
  creatorId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?
  status      SprintStatus @default(PENDING)
  issues      Issue[]

  // Relations
  roadmapId String?
  roadmap   Roadmap? @relation(fields: [roadmapId], references: [id])
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text()
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isEdited  Boolean   @default(false)
  issueId   String
  logId     String?
  Issue     Issue?    @relation(fields: [issueId], references: [id])

  @@index([issueId])
}

model DefaultUser {
  id     String  @id
  name   String
  email  String
  avatar String?
}

model Goal {
  id            String      @id @default(uuid())
  projectId     String
  title         String
  niche         String?
  channel       GoalChannel
  description   String?     @db.Text()
  timeboxDays   Int         @default(30)
  budgetUsd     Int         @default(0)
  successMetric String      @default("$50 net")
  constraints   Json
  revenue       Json
  deliverables  Json
  audienceJson  Json?
  profileJson   Json?
  createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  templateId    String?
  activePlanId  String?

  // Relations
  project          Project               @relation(fields: [projectId], references: [id])
  template         GoalTemplate?         @relation(fields: [templateId], references: [id])
  activePlan       PlanVersion?          @relation("ActivePlan", fields: [activePlanId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  contextSnapshots GoalContextSnapshot[]
  promptRuns       PromptRun[]
  planVersions     PlanVersion[]         @relation("GoalPlanVersions")
  Roadmap          Roadmap?

  @@index([projectId])
  @@index([createdBy])
  @@index([channel])
}

model GoalTemplate {
  id           String   @id @default(uuid())
  name         String
  promptText   String   @db.Text()
  outputSchema Json
  systemMsg    String?  @db.Text()
  createdAt    DateTime @default(now())

  // Relations
  goals Goal[]
}

model GoalContextSnapshot {
  id             String   @id @default(uuid())
  goalId         String
  repoSnapshotId String?
  summary        String   @db.Text()
  keywords       String[]
  risks          String?  @db.Text()
  competitors    Json?
  sourcesCount   Int
  createdAt      DateTime @default(now())

  // Relations
  goal            Goal             @relation(fields: [goalId], references: [id])
  researchSources ResearchSource[]

  @@index([goalId])
}

model ResearchSource {
  id          String    @id @default(uuid())
  snapshotId  String
  url         String
  title       String
  publishedAt DateTime?
  relevance   Float
  excerpt     String?   @db.Text()

  // Relations
  snapshot GoalContextSnapshot @relation(fields: [snapshotId], references: [id])

  @@index([snapshotId])
}

model PromptRun {
  id            String   @id @default(uuid())
  goalId        String
  planVersionId String?
  model         String
  temperature   Float    @default(0.2)
  promptText    String   @db.Text()
  schemaName    String?
  tokensIn      Int
  tokensOut     Int
  durationMs    Int
  costUsd       Float
  parseOk       Boolean
  outputJson    Json?
  createdAt     DateTime @default(now())

  // Relations
  goal        Goal         @relation(fields: [goalId], references: [id])
  planVersion PlanVersion? @relation(fields: [planVersionId], references: [id])

  @@index([goalId])
  @@index([planVersionId])
}

model PlanVersion {
  id          String   @id @default(uuid())
  goalId      String
  status      String   @default("ACTIVE")
  p50Hours    Float?
  p90Hours    Float?
  successProb Float?
  createdAt   DateTime @default(now())

  // Relations
  goal        Goal        @relation("GoalPlanVersions", fields: [goalId], references: [id])
  activeGoals Goal[]      @relation("ActivePlan")
  promptRuns  PromptRun[]

  @@index([goalId])
}

// Add Roadmap model
model Roadmap {
  id          String   @id @default(uuid())
  goalId      String   @unique
  goal        Goal     @relation(fields: [goalId], references: [id])
  name        String
  description String?  @db.Text()
  status      String   @default("DRAFT") // DRAFT, ACTIVE, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sprints     Sprint[]

  @@index([goalId])
}
